using System;
using System.Text;

namespace SKILL
{
	public class GSkill4100Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.1f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((215 * skill_level))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4100Stub()
			: base(4100)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_七星印");
			SetAction(1,"青云门_法宝_七星印");
			SetAction(2,"鬼王宗_法宝_七星印");
			SetAction(3,"合欢派_法宝_七星印");
			SetAction(4,"天音寺_法宝_七星印");
			SetAction(5,"鬼道_法宝_七星印");
			SetAction(6,"焚香谷_法宝_七星印");
			SetAction(7,"兽神_法宝_七星印");
			SetAction(8,"狐妖_法宝_七星印");
			SetAction(9,"轩辕_法宝_七星印");
			SetAction(10,"怀光_法宝_七星印");
			SetAction(11,"太昊_法宝_七星印");
			SetAction(12,"天华_法宝_七星印");
			SetAction(13,"灵夙_法宝_七星印");
			SetAction(14,"英招_法宝_七星印");
			SetAction(15,"武器大师_法宝_七星印");
			SetAction(16,"武器大师_法宝_七星印");
			SetAction(17,"天音寺_法宝_七星印");
			SetAction(18,"鬼道_骑乘_法宝_七星印");
			SetAction(19,"青云门_骑乘_法宝_七星印");
			SetAction(20,"鬼王宗_骑乘_法宝_七星印");
			SetAction(21,"合欢派_骑乘_法宝_七星印");
			SetAction(22,"天音寺_骑乘_法宝_七星印");
			SetAction(23,"鬼道_骑乘_法宝_七星印");
			SetAction(24,"焚香谷_骑乘_法宝_七星印");
			SetAction(25,"兽神_骑乘_法宝_七星印");
			SetAction(26,"狐妖_骑乘_法宝_七星印");
			SetAction(27,"轩辕_骑乘_法宝_七星印");
			SetAction(28,"怀光_骑乘_法宝_七星印");
			SetAction(29,"太昊_骑乘_法宝_七星印");
			SetAction(30,"天华_骑乘_法宝_七星印");
			name = "真・华彰星陨";
			nativename = "真・华彰星陨";
			icon = "飞升华彰星陨.dds";
			SetTalent(0,721);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override float GetRadius(GSkill skill)
		{
			return 4.000000f;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override int GetCoverage(GSkill skill)
		{
			return 2;
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4100 : GSkill
	{
		public GSkill4100()
			: base(4100)
		{
			
		}
	}
	public class GSkill4101Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + (player_mp * (skill_level * 0.02f) + ((215 * skill_level)))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4101Stub()
			: base(4101)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_江山如画");
			SetAction(1,"青云门_法宝_江山如画");
			SetAction(2,"鬼王宗_法宝_江山如画");
			SetAction(3,"合欢派_法宝_江山如画");
			SetAction(4,"天音寺_法宝_江山如画");
			SetAction(5,"鬼道_法宝_江山如画");
			SetAction(6,"焚香谷_法宝_江山如画");
			SetAction(7,"兽神_法宝_江山如画");
			SetAction(8,"狐妖_法宝_江山如画");
			SetAction(9,"轩辕_法宝_江山如画");
			SetAction(10,"怀光_法宝_江山如画");
			SetAction(11,"太昊_法宝_江山如画");
			SetAction(12,"天华_法宝_江山如画");
			SetAction(13,"灵夙_法宝_江山如画");
			SetAction(14,"英招_法宝_江山如画");
			SetAction(15,"武器大师_法宝_江山如画");
			SetAction(16,"武器大师_法宝_江山如画");
			SetAction(17,"天音寺_法宝_江山如画");
			SetAction(18,"鬼道_骑乘_法宝_江山如画");
			SetAction(19,"青云门_骑乘_法宝_江山如画");
			SetAction(20,"鬼王宗_骑乘_法宝_江山如画");
			SetAction(21,"合欢派_骑乘_法宝_江山如画");
			SetAction(22,"天音寺_骑乘_法宝_江山如画");
			SetAction(23,"鬼道_骑乘_法宝_江山如画");
			SetAction(24,"焚香谷_骑乘_法宝_江山如画");
			SetAction(25,"鬼道_骑乘_法宝_江山如画");
			SetAction(26,"狐妖_骑乘_法宝_江山如画");
			SetAction(27,"轩辕_骑乘_法宝_江山如画");
			SetAction(28,"怀光_骑乘_法宝_江山如画");
			SetAction(29,"太昊_骑乘_法宝_江山如画");
			SetAction(30,"天华_骑乘_法宝_江山如画");
			name = "真・逍遥如梦";
			nativename = "真・逍遥如梦";
			icon = "飞升幕天毒.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4101 : GSkill
	{
		public GSkill4101()
			: base(4101)
		{
			
		}
	}
	public class GSkill4102Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((215 * skill_level))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4102Stub()
			: base(4102)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_四像佛塔");
			SetAction(1,"青云门_法宝_四像佛塔");
			SetAction(2,"鬼王宗_法宝_四像佛塔");
			SetAction(3,"合欢派_法宝_四像佛塔");
			SetAction(4,"天音寺_法宝_四像佛塔");
			SetAction(5,"鬼道_法宝_四像佛塔");
			SetAction(6,"焚香谷_法宝_四像佛塔");
			SetAction(7,"兽神_法宝_四象佛塔");
			SetAction(8,"狐妖_法宝_四象佛塔");
			SetAction(9,"轩辕_法宝_四象佛塔");
			SetAction(10,"怀光_法宝_四象佛塔");
			SetAction(11,"太昊_法宝_四象佛塔");
			SetAction(12,"天华_法宝_四象佛塔");
			SetAction(13,"灵夙_法宝_四象佛塔");
			SetAction(14,"英招_法宝_四象佛塔");
			SetAction(15,"武器大师_法宝_四象佛塔");
			SetAction(16,"武器大师_法宝_四象佛塔");
			SetAction(17,"天音寺_法宝_四像佛塔");
			SetAction(18,"鬼道_骑乘_法宝_四像佛塔");
			SetAction(19,"青云门_骑乘_法宝_四像佛塔");
			SetAction(20,"鬼王宗_骑乘_法宝_四像佛塔");
			SetAction(21,"合欢派_骑乘_法宝_四像佛塔");
			SetAction(22,"天音寺_骑乘_法宝_四像佛塔");
			SetAction(23,"鬼道_骑乘_法宝_四像佛塔");
			SetAction(24,"焚香谷_骑乘_法宝_四像佛塔");
			SetAction(25,"兽神_骑乘_法宝_四象佛塔");
			SetAction(26,"狐妖_骑乘_法宝_四象佛塔");
			SetAction(27,"轩辕_骑乘_法宝_四象佛塔");
			SetAction(28,"怀光_骑乘_法宝_四象佛塔");
			SetAction(29,"太昊_骑乘_法宝_四象佛塔");
			SetAction(30,"天华_骑乘_法宝_四象佛塔");
			name = "真・圣塔降魔";
			nativename = "真・圣塔降魔";
			icon = "飞升圣塔降魔.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override int GetEnmity(GSkill skill)
		{
			return 1;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4102 : GSkill
	{
		public GSkill4102()
			: base(4102)
		{
			
		}
	}
	public class GSkill4103Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((215 * skill_level))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4103Stub()
			: base(4103)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_蟠龙幡");
			SetAction(1,"青云门_法宝_蟠龙幡");
			SetAction(2,"鬼王宗_法宝_蟠龙幡");
			SetAction(3,"合欢派_法宝_蟠龙幡");
			SetAction(4,"天音寺_法宝_蟠龙幡");
			SetAction(5,"鬼道_法宝_蟠龙幡");
			SetAction(6,"焚香谷_法宝_蟠龙幡");
			SetAction(7,"兽神_法宝_蟠龙幡");
			SetAction(8,"狐妖_法宝_蟠龙幡");
			SetAction(9,"轩辕_法宝_蟠龙幡");
			SetAction(10,"怀光_法宝_蟠龙幡");
			SetAction(11,"太昊_法宝_蟠龙幡");
			SetAction(12,"天华_法宝_蟠龙幡");
			SetAction(13,"灵夙_法宝_蟠龙幡");
			SetAction(14,"英招_法宝_蟠龙幡");
			SetAction(15,"武器大师_法宝_蟠龙幡");
			SetAction(16,"武器大师_法宝_蟠龙幡");
			SetAction(17,"天音寺_法宝_蟠龙幡");
			SetAction(18,"鬼道_骑乘_法宝_蟠龙幡");
			SetAction(19,"青云门_骑乘_法宝_蟠龙幡");
			SetAction(20,"鬼王宗_骑乘_法宝_蟠龙幡");
			SetAction(21,"合欢派_骑乘_法宝_蟠龙幡");
			SetAction(22,"天音寺_骑乘_法宝_蟠龙幡");
			SetAction(23,"鬼道_骑乘_法宝_蟠龙幡");
			SetAction(24,"焚香谷_骑乘_法宝_蟠龙幡");
			SetAction(25,"兽神_骑乘_法宝_蟠龙幡");
			SetAction(26,"狐妖_骑乘_法宝_蟠龙幡");
			SetAction(27,"轩辕_骑乘_法宝_蟠龙幡");
			SetAction(28,"怀光_骑乘_法宝_蟠龙幡");
			SetAction(29,"太昊_骑乘_法宝_蟠龙幡");
			SetAction(30,"天华_骑乘_法宝_蟠龙幡");
			name = "真・虬龙烈炎";
			nativename = "真・虬龙烈炎";
			icon = "飞升虬龙烈炎.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override int GetEnmity(GSkill skill)
		{
			return 1;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4103 : GSkill
	{
		public GSkill4103()
			: base(4103)
		{
			
		}
	}
	public class GSkill4104Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetCrit((skill_level * 0.03f));
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((3 * player_level * skill_level + (215 * skill_level)))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4104Stub()
			: base(4104)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_五龙轮");
			SetAction(1,"青云门_法宝_五龙轮");
			SetAction(2,"鬼王宗_法宝_五龙轮");
			SetAction(3,"合欢派_法宝_五龙轮");
			SetAction(4,"天音寺_法宝_五龙轮");
			SetAction(5,"鬼道_法宝_五龙轮");
			SetAction(6,"焚香谷_法宝_五龙轮");
			SetAction(7,"兽神_法宝_五龙轮");
			SetAction(8,"狐妖_法宝_五龙轮");
			SetAction(9,"轩辕_法宝_五龙轮");
			SetAction(10,"怀光_法宝_五龙轮");
			SetAction(11,"太昊_法宝_五龙轮");
			SetAction(12,"天华_法宝_五龙轮");
			SetAction(13,"灵夙_法宝_五龙轮");
			SetAction(14,"英招_法宝_五龙轮");
			SetAction(15,"武器大师_法宝_五龙轮");
			SetAction(16,"武器大师_法宝_五龙轮");
			SetAction(17,"天音寺_法宝_五龙轮");
			SetAction(18,"鬼道_骑乘_法宝_五龙轮");
			SetAction(19,"青云门_骑乘_法宝_五龙轮");
			SetAction(20,"鬼王宗_骑乘_法宝_五龙轮");
			SetAction(21,"合欢派_骑乘_法宝_五龙轮");
			SetAction(22,"天音寺_骑乘_法宝_五龙轮");
			SetAction(23,"鬼道_骑乘_法宝_五龙轮");
			SetAction(24,"焚香谷_骑乘_法宝_五龙轮");
			SetAction(25,"兽神_骑乘_法宝_五龙轮");
			SetAction(26,"狐妖_骑乘_法宝_五龙轮");
			SetAction(27,"轩辕_骑乘_法宝_五龙轮");
			SetAction(28,"怀光_骑乘_法宝_五龙轮");
			SetAction(29,"太昊_骑乘_法宝_五龙轮");
			SetAction(30,"天华_骑乘_法宝_五龙轮");
			name = "真・五龙御天";
			nativename = "真・五龙御天";
			icon = "飞升五龙御天.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override int GetEnmity(GSkill skill)
		{
			return 1;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4104 : GSkill
	{
		public GSkill4104()
			: base(4104)
		{
			
		}
	}
	public class GSkill4105Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((215 * skill_level))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4105Stub()
			: base(4105)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_翻天神印");
			SetAction(1,"青云门_法宝_翻天神印");
			SetAction(2,"鬼王宗_法宝_翻天神印");
			SetAction(3,"合欢派_法宝_翻天神印");
			SetAction(4,"天音寺_法宝_翻天神印");
			SetAction(5,"鬼道_法宝_翻天神印");
			SetAction(6,"焚香谷_法宝_翻天神印");
			SetAction(7,"兽神_法宝_翻天神印");
			SetAction(8,"狐妖_法宝_翻天神印");
			SetAction(9,"轩辕_法宝_翻天神印");
			SetAction(10,"怀光_法宝_翻天神印");
			SetAction(11,"太昊_法宝_翻天神印");
			SetAction(12,"天华_法宝_翻天神印");
			SetAction(13,"灵夙_法宝_翻天神印");
			SetAction(14,"英招_法宝_翻天神印");
			SetAction(15,"武器大师_法宝_翻天神印");
			SetAction(16,"武器大师_法宝_翻天神印");
			SetAction(17,"天音寺_法宝_翻天神印");
			SetAction(18,"鬼道_骑乘_法宝_翻天神印");
			SetAction(19,"青云门_骑乘_法宝_翻天神印");
			SetAction(20,"鬼王宗_骑乘_法宝_翻天神印");
			SetAction(21,"合欢派_骑乘_法宝_翻天神印");
			SetAction(22,"天音寺_骑乘_法宝_翻天神印");
			SetAction(23,"鬼道_骑乘_法宝_翻天神印");
			SetAction(24,"焚香谷_骑乘_法宝_翻天神印");
			SetAction(25,"兽神_骑乘_法宝_翻天神印");
			SetAction(26,"狐妖_骑乘_法宝_翻天神印");
			SetAction(27,"轩辕_骑乘_法宝_翻天神印");
			SetAction(28,"怀光_骑乘_法宝_翻天神印");
			SetAction(29,"太昊_骑乘_法宝_翻天神印");
			SetAction(30,"天华_骑乘_法宝_翻天神印");
			name = "真・五岳咸服";
			nativename = "真・五岳咸服";
			icon = "飞升五岳咸服.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override int GetEnmity(GSkill skill)
		{
			return 1;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4105 : GSkill
	{
		public GSkill4105()
			: base(4105)
		{
			
		}
	}
	public class GSkill4106Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_atkrate = player.GetAtkrate();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((skill_level * player_atkrate + (215 * skill_level)))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4106Stub()
			: base(4106)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_长明灯");
			SetAction(1,"青云_法宝_长明灯");
			SetAction(2,"鬼王宗_法宝_长明灯");
			SetAction(3,"合欢派_法宝_长明灯");
			SetAction(4,"天音_法宝_长明灯");
			SetAction(5,"鬼道_法宝_长明灯");
			SetAction(6,"焚香谷_法宝_长明灯");
			SetAction(7,"兽神_法宝_长明灯");
			SetAction(8,"狐妖_法宝_长明灯");
			SetAction(9,"轩辕_法宝_长明灯");
			SetAction(10,"怀光_法宝_长明灯");
			SetAction(11,"太昊_法宝_长明灯");
			SetAction(12,"天华_法宝_长明灯");
			SetAction(13,"灵夙_法宝_长明灯");
			SetAction(14,"英招_法宝_长明灯");
			SetAction(15,"武器大师_法宝_长明灯");
			SetAction(16,"武器大师_法宝_长明灯");
			SetAction(17,"天音_法宝_长明灯");
			SetAction(18,"鬼道_骑乘_法宝_长明灯");
			SetAction(19,"青云门_骑乘_法宝_长明灯");
			SetAction(20,"鬼王宗_骑乘_法宝_长明灯");
			SetAction(21,"合欢派_骑乘_法宝_长明灯");
			SetAction(22,"天音寺_骑乘_法宝_长明灯");
			SetAction(23,"鬼道_骑乘_法宝_长明灯");
			SetAction(24,"焚香谷_骑乘_法宝_长明灯");
			SetAction(25,"兽神_骑乘_法宝_长明灯");
			SetAction(26,"狐妖_骑乘_法宝_长明灯");
			SetAction(27,"轩辕_骑乘_法宝_长明灯");
			SetAction(28,"怀光_骑乘_法宝_长明灯");
			SetAction(29,"太昊_骑乘_法宝_长明灯");
			SetAction(30,"天华_骑乘_法宝_长明灯");
			name = "真・寒月镇潭";
			nativename = "真・寒月镇潭";
			icon = "飞升通用02.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override int GetEnmity(GSkill skill)
		{
			return 1;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4106 : GSkill
	{
		public GSkill4106()
			: base(4106)
		{
			
		}
	}
	public class GSkill4107Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((215 * skill_level))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4107Stub()
			: base(4107)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_万骨招魂幡");
			SetAction(1,"青云门_法宝_万骨招魂幡");
			SetAction(2,"鬼王宗_法宝_万骨招魂幡");
			SetAction(3,"合欢派_法宝_万骨招魂幡");
			SetAction(4,"天音寺_法宝_万骨招魂幡");
			SetAction(5,"鬼道_法宝_万骨招魂幡");
			SetAction(6,"焚香谷_法宝_万骨招魂幡");
			SetAction(7,"兽神_法宝_万骨招魂幡");
			SetAction(8,"狐妖_法宝_万骨招魂幡");
			SetAction(9,"轩辕_法宝_万骨招魂幡");
			SetAction(10,"怀光_法宝_万骨招魂幡");
			SetAction(11,"太昊_法宝_万骨招魂幡");
			SetAction(12,"天华_法宝_万骨招魂幡");
			SetAction(13,"灵夙_法宝_万骨招魂幡");
			SetAction(14,"英招_法宝_万骨招魂幡");
			SetAction(15,"武器大师_法宝_万骨招魂幡");
			SetAction(16,"武器大师_法宝_万骨招魂幡");
			SetAction(17,"天音寺_法宝_万骨招魂幡");
			SetAction(18,"鬼道_骑乘_法宝_万骨招魂幡");
			SetAction(19,"青云门_骑乘_法宝_万骨招魂幡");
			SetAction(20,"鬼王宗_骑乘_法宝_万骨招魂幡");
			SetAction(21,"合欢派_骑乘_法宝_万骨招魂幡");
			SetAction(22,"天音寺_骑乘_法宝_万骨招魂幡");
			SetAction(23,"鬼道_骑乘_法宝_万骨招魂幡");
			SetAction(24,"焚香谷_骑乘_法宝_万骨招魂幡");
			SetAction(25,"兽神_骑乘_法宝_万骨招魂幡");
			SetAction(26,"狐妖_骑乘_法宝_万骨招魂幡");
			SetAction(27,"轩辕_骑乘_法宝_万骨招魂幡");
			SetAction(28,"怀光_骑乘_法宝_万骨招魂幡");
			SetAction(29,"太昊_骑乘_法宝_万骨招魂幡");
			SetAction(30,"天华_骑乘_法宝_万骨招魂幡");
			name = "真・百骨之咒";
			nativename = "真・百骨之咒";
			icon = "飞升百骨之咒.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4107 : GSkill
	{
		public GSkill4107()
			: base(4107)
		{
			
		}
	}
	public class GSkill4108Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				player.SetVar1(player_res2);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + 1.0f)));
				skill.SetPlus(((225 * skill_level)));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4108Stub()
			: base(4108)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = false;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼王宗_法宝_宝库之魂");
			SetAction(1,"青云门_法宝_宝库之魂");
			SetAction(2,"鬼王宗_法宝_宝库之魂");
			SetAction(3,"合欢派_法宝_宝库之魂");
			SetAction(4,"天音寺_法宝_宝库之魂");
			SetAction(5,"鬼道_法宝_宝库之魂");
			SetAction(6,"焚香谷_法宝_宝库之魂");
			SetAction(7,"兽神_法宝_宝库之魂");
			SetAction(8,"狐妖_法宝_宝库之魂");
			SetAction(9,"轩辕_法宝_宝库之魂");
			SetAction(10,"怀光_法宝_宝库之魂");
			SetAction(11,"太昊_法宝_宝库之魂");
			SetAction(12,"天华_法宝_宝库之魂");
			SetAction(13,"灵夙_法宝_宝库之魂");
			SetAction(14,"英招_法宝_宝库之魂");
			SetAction(15,"武器大师_法宝_宝库之魂");
			SetAction(16,"武器大师_法宝_宝库之魂");
			SetAction(17,"天音寺_法宝_宝库之魂");
			SetAction(18,"鬼王宗_骑乘_法宝_宝库之魂");
			SetAction(19,"青云门_骑乘_法宝_宝库之魂");
			SetAction(20,"鬼王宗_骑乘_法宝_宝库之魂");
			SetAction(21,"合欢派_骑乘_法宝_宝库之魂");
			SetAction(22,"天音寺_骑乘_法宝_宝库之魂");
			SetAction(23,"鬼道_骑乘_法宝_宝库之魂");
			SetAction(24,"焚香谷_骑乘_法宝_宝库之魂");
			SetAction(25,"兽神_骑乘_法宝_宝库之魂");
			SetAction(26,"狐妖_骑乘_法宝_宝库之魂");
			SetAction(27,"轩辕_骑乘_法宝_宝库之魂");
			SetAction(28,"怀光_骑乘_法宝_宝库之魂");
			SetAction(29,"太昊_骑乘_法宝_宝库之魂");
			SetAction(30,"天华_骑乘_法宝_宝库之魂");
			name = "真・碧天宇华";
			nativename = "真・碧天宇华";
			icon = "飞升宝库之魂.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 110000 - 10000 * skill_level;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 445);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4108 : GSkill
	{
		public GSkill4108()
			: base(4108)
		{
			
		}
	}
	public class GSkill4109Stub : GSkillStub
	{
		public class GState1 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 1600;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();

				player.SetPray(1);
			}
			public override bool Cancel(GSkill skill)
			{
				return true;
			}
		}
		public class GState2 : GState
		{
			public override int GetTime(GSkill skill)
			{
				return 400;
			}
			public override void Calculate(GSkill skill)
			{
				GPlayerWrapper	player = skill.GetPlayer();
				int				player_level = player.GetLevel();
				int				player_hp = player.GetHp();
				int				player_maxhp = player.GetMaxhp();
				int				player_mp = player.GetMp();
				int				player_maxmp = player.GetMaxmp();
				int				player_maxatk = player.GetMaxatk();
				int				player_def = player.GetDef();
				int				player_res1 = player.GetRes1();
				int				player_res2 = player.GetRes2();
				int				player_res3 = player.GetRes3();
				int				player_res4 = player.GetRes4();
				int				player_res5 = player.GetRes5();
				int				player_occupation = player.GetOccupation();
				int				skill_level = skill.GetLevel();
				int				skill_t0 = skill.GetT0();
				int				skill_t1 = skill.GetT1();

				/*
				player.SetVar11(player_occupation);
				player.SetVar1(player_maxatk);
				player.SetVar2(player_maxhp);
				player.SetVar3(player_maxmp);
				player.SetVar4(player_hp);
				player.SetVar5(player_mp);
				player.SetVar6(player_res1);
				player.SetVar7(player_res2);
				player.SetVar8(player_res3);
				player.SetVar9(player_res4);
				player.SetVar10(player_res5);
				if ( zrand(100) >= (skill_level + 1) * (skill_level + 1) )
				    v = 2;
				  else
				    v = 1;
				player.SetVar16(v);
				skill.SetRatio((D2INT(player_level / (9 - skill_level)) * 0.01f + (skill_level * 0.07000000000000001f + (skill_t0 * 0.03f + 1.0f))));
				skill.SetPlus((player_def * (skill_t1 * 0.03f) + ((skill_level * (D2INT((zrand(4 * skill_level + 99)) / 100.0f) * 0.8f) + 1.0f) * ((250 * skill_level)))));
				player.SetPerform(1);
				*/
			}
		}
		public GSkill4109Stub()
			: base(4109)
		{
			occupation = 130;
			maxlevel = 5;
			maxlearn = 5;
			eventflag = 0;
			spcost = 1;
			reborncount = 0;
			type = 1;
			timetype = 0;
			targettype = 0;
			rangetype = 0;
			doenchant = true;
			dobless = true;
			autoattack = true;
			allowform = 0;
			credittype = 0;
			clearmask = 0;
			skill_limit = 0;
			skillelemsnum = 0;
			skillelemsfactor = 0.000000f;
			serialskill = 0;
			charge = 0;
			chargedist = 0.000000f;
			succeedskillcolor = 1;
			succeedskillcolornum = 1;
			comboskill = 0;
			need_item = false;
			item1_id = -1;
			item1_num = 0;
			item2_id = -1;
			item2_num = 0;
			item_relation = 0;
			weapon_limit = -1;
			SetAction(0,"鬼道_法宝_摄魂");
			SetAction(1,"青云门_法宝_摄魂");
			SetAction(2,"鬼王宗_法宝_摄魂");
			SetAction(3,"合欢派_法宝_摄魂");
			SetAction(4,"天音寺_法宝_摄魂");
			SetAction(5,"鬼道_法宝_摄魂");
			SetAction(6,"焚香谷_法宝_摄魂");
			SetAction(7,"兽神_法宝_摄魂");
			SetAction(8,"狐妖_法宝_摄魂");
			SetAction(9,"轩辕_法宝_摄魂");
			SetAction(10,"怀光_法宝_摄魂");
			SetAction(11,"太昊_法宝_摄魂");
			SetAction(12,"天华_法宝_摄魂");
			SetAction(13,"灵夙_法宝_摄魂");
			SetAction(14,"英招_法宝_摄魂");
			SetAction(15,"武器大师_法宝_摄魂");
			SetAction(16,"武器大师_法宝_摄魂");
			SetAction(17,"天音寺_法宝_摄魂");
			SetAction(18,"鬼道_骑乘_法宝_摄魂");
			SetAction(19,"青云门_骑乘_法宝_摄魂");
			SetAction(20,"鬼王宗_骑乘_法宝_摄魂");
			SetAction(21,"合欢派_骑乘_法宝_摄魂");
			SetAction(22,"天音寺_骑乘_法宝_摄魂");
			SetAction(23,"鬼道_骑乘_法宝_摄魂");
			SetAction(24,"焚香谷_骑乘_法宝_摄魂");
			SetAction(25,"兽神_骑乘_法宝_摄魂");
			SetAction(26,"狐妖_骑乘_法宝_摄魂");
			SetAction(27,"轩辕_骑乘_法宝_摄魂");
			SetAction(28,"怀光_骑乘_法宝_摄魂");
			SetAction(29,"太昊_骑乘_法宝_摄魂");
			SetAction(30,"天华_骑乘_法宝_摄魂");
			name = "真・魂摄心驰";
			nativename = "真・魂摄心驰";
			icon = "飞升魂摄心驰.dds";
			SetTalent(0,687);
			SetTalent(1,1582);
			SetTalent(2,0);
			SetTalent(3,0);
			SetTalent(4,0);
			SetTalent(5,0);
			SetTalent(6,0);
			SetTalent(7,0);
			talent_size = 2;
			talent_type = 0;
			use_proficiency = false;
			inc_proficiency = 0;
			preskillnum = 0;
			cycle = false;
			cyclemode = 0;
			cyclegfx = "";
			skill_class = -2;
			guide = false;
			summon_id = 0;
			trigger = false;
			conbutton_sub = false;
			isBabySkill = false;
			castInPreSkill = false;
			preCastSkillId = 0;
			darkLightType = 0;
			followskill = 0;
			targetcnt = 0;
			excludemonstercnt = 0;

			AddState(new GState1());
			AddState(new GState2());
		}
		public override int GetExecutetime(GSkill skill)
		{
			return 2000;
		}
		public override int GetCooldowntime(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return 6300 - 300 * skill_level;
		}
		public override int GetEnmity(GSkill skill)
		{
			return 1;
		}
		public override float GetPraydistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 5.0f);
		}
		public override float GetCastdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f);
		}
		public override float GetEffectdistance(GSkill skill)
		{
			GPlayerWrapper	player = skill.GetPlayer();
			float			player_range = player.GetRange();

			return (D2INT((player_range / 13.0f)) * 2.8f + (D2INT(player_range / 8.9f) * 1.8f + ((player_range * 0.5f) - D2INT(player_range / 3.9f) * 0.3f)) + 0.05f + 10.0f);
		}
		public override float GetMpcost(GSkill skill)
		{
			int				skill_level = skill.GetLevel();

			return ((-35 * skill_level) - skill_level * skill_level + 555);
		}
		public override bool StateAttack(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffects(true);
			return true;
		}
		public override bool BlessMe(GSkill skill)
		{
			GPlayerWrapper	victim = skill.GetVictim();

			victim.SetTalismaneffectsbless(true);
			return true;
		}
	}
	public class GSkill4109 : GSkill
	{
		public GSkill4109()
			: base(4109)
		{
			
		}
	}
}
